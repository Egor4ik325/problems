import unittest

from main import Hotel


class HotelTests(unittest.TestCase):
    """
    The algorithm should find nearest room to the query position
    that satisfies query condition (>= query size).
    """

    def test_1(self):
        rooms = [[2, 2], [1, 2], [3, 2]]
        queries = [[3, 1], [3, 3], [5, 2]]
        self.assertEqual(Hotel(rooms).query(queries), [3, -1, 3])

    def test_2(self):
        rooms = [[1, 4], [2, 3], [3, 5], [4, 1], [5, 2]]
        queries = [[2, 3], [2, 4], [2, 5]]
        self.assertEqual(Hotel(rooms).query(queries), [2, 1, 3])

    def test_edge_cases(self):
        rooms = [
            [0, 1],
            [1, 1],
            [2, 1],
            [3, 1],
            [4, 1],
            [5, 1],
            [6, 1],
            [7, 1],
            [8, 1],
            [9, 1],
        ]
        h = Hotel(rooms)
        self.assertEqual(h.query([[0, 1]]), [0])
        self.assertEqual(h.query([[1, 1]]), [1])
        self.assertEqual(h.query([[8, 1]]), [8])
        self.assertEqual(h.query([[9, 1]]), [9])
    
    def test_query_not_existing_room_but_nearest(self):
        rooms = [[0, 1], [10, 1], [15, 1], [16, 1], [17, 1]]
        h = Hotel(rooms)
        self.assertEqual(h.query([[11, 1]]), [10])
        self.assertEqual(h.query([[12, 1]]), [10])
        self.assertEqual(h.query([[14, 1]]), [15])
    
    def test_not_fit_any_room(self):
        rooms = [[0, 1], [10, 1], [15, 1], [16, 1], [17, 1]]
        h = Hotel(rooms)
        self.assertEqual(h.query([[10, 2]]), [-1])

    def test_3(self):
        rooms = [ [173, 397], [281, 320], [415, 181], [497, 269], [77, 285], [321, 104], [385, 43], [391, 351], [371, 287], [107, 305], [247, 187], [430, 240], [465, 321], [481, 215], [1, 423], [304, 465], [411, 176], [474, 253], [219, 225], [433, 443], [106, 365], [94, 261], [135, 187], [401, 117], [181, 276], [201, 137], [461, 312], [35, 421], [13, 307], [489, 375], [69, 253], [9, 186], [89, 164], [145, 217], [331, 183], [326, 281], [271, 429], [454, 466], [153, 297], [177, 321], [49, 381], [156, 126], [117, 321], [75, 220], [493, 71], [445, 231], [263, 425], [178, 146], [4, 131], [324, 159], [5, 491], [381, 441], [183, 73], [380, 487], [192, 322], [405, 141], [150, 301], [91, 346], [100, 287], [197, 425], [292, 391], [357, 89], [486, 281], [203, 201], [484, 429], [289, 264], [17, 486], [157, 447], [134, 67], [6, 425], [237, 47], [71, 359], [196, 467], [267, 25], [265, 493], [417, 116], [368, 191], [233, 242], [207, 359], [167, 193], [386, 306], [211, 201], [22, 1], [36, 101], [152, 171], [33, 315], [351, 429], [492, 313], [397, 267], [341, 197], [161, 221], [198, 349], [470, 405], [473, 308], [301, 129], [224, 285], [307, 137], [165, 371], [337, 201], [151, 445], ]

        queries = [ [469, 153], [366, 66], [295, 235], [73, 1], [185, 263], [382, 127], [137, 154], [321, 405], [431, 245], [292, 166], [253, 205], [24, 189], [106, 433], [478, 361], [385, 399], [259, 397], [325, 265], [163, 129], [431, 361], [316, 451], [271, 261], [484, 236], [316, 442], [5, 362], [209, 236], [337, 289], [1, 279], [249, 391], [51, 337], [209, 18], [277, 177], [117, 350], [189, 181], [381, 307], [29, 313], [251, 497], [1, 325], [329, 321], [68, 215], [446, 373], [181, 393], [281, 116], [183, 301], [362, 468], [193, 109], [13, 189], [454, 181], [400, 37], [87, 128], [446, 497], [147, 97], [273, 41], [349, 202], [165, 105], [173, 220], [233, 391], [84, 426], [496, 441], [151, 57], [295, 413], [110, 175], [170, 215], [133, 119], [445, 233], [27, 444], [214, 53], [477, 303], [353, 33], [231, 243], [91, 417], [78, 483], [145, 47], [181, 37], [161, 29], [141, 446], [231, 286], [101, 137], [174, 309], [437, 421], [211, 187], [256, 363], [384, 211], [1, 111], [451, 23], [95, 151], [129, 213], [327, 196], [30, 132], [61, 149], [163, 11], [243, 133], [33, 331], [343, 211], [277, 1], [282, 93], [251, 411], [15, 259], [85, 149], [1, 157], [169, 401], ]

        expected = [470,368,292,71,181,381,135,304,433,292,263,17,151,484,381,263,326,161,433,304,271,484,304,5,207,351,1,263,49,207,281,106,192,381,33,-1,1,351,69,454,173,281,177,380,192,13,454,401,89,-1,145,271,351,165,173,263,17,454,151,304,107,173,135,454,17,211,473,351,224,35,17,145,181,161,157,207,100,173,433,211,263,386,1,454,94,117,326,33,69,161,247,35,351,281,281,263,13,89,1,157]

        self.assertEqual(Hotel(rooms).query(queries), expected)
